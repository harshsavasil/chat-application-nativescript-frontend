"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var index_1 = require("./index");
// tslint:disable-next-line:no-var-requires
var Sqlite = require('nativescript-sqlite');
var DataBaseService = (function () {
    function DataBaseService() {
    }
    DataBaseService.prototype.createTables = function () {
        var _this = this;
        (new Sqlite(index_1.Config.dbName)).then(function (db) {
            _this.database = db;
            if (!_this.checkIfTableExist(index_1.Config.contactTableName)) {
                _this.createContactTable();
            }
            if (!_this.checkIfTableExist(index_1.Config.messageTableName)) {
                _this.createMessagesTable();
            }
        }, function (error) {
            alert('Could Not create a connection to DB.');
        });
    };
    DataBaseService.prototype.createContactTable = function () {
        (new Sqlite(index_1.Config.dbName)).then(function (db) {
            // tslint:disable-next-line:max-line-length
            db.execSQL(index_1.Config.contactsTableCreationQuery).then(function (id) {
                // tslint:disable-next-line:no-console
                console.log('Contacts TABLE CREATED SUCCESSFULLY');
                db.close();
            }, function (error) {
                // tslint:disable-next-line:no-console
                console.log('CREATE TABLE ERROR', error);
            });
        }, function (error) {
            // console.log('error in creating db connection.');
        });
    };
    DataBaseService.prototype.createMessagesTable = function () {
        (new Sqlite(index_1.Config.dbName)).then(function (db) {
            // tslint:disable-next-line:max-line-length
            db.execSQL(index_1.Config.messagesTableCreationQuery).then(function (id) {
                // tslint:disable-next-line:no-console
                console.log('Messages TABLE CREATED SUCCESSFULLY', id);
                db.close();
                // this.getChatMessagesFromService();
            }, function (error) {
                // tslint:disable-next-line:no-console
                console.log('Messages TABLE Could Not be CREATED', error);
            });
        }, function (error) {
            // console.log('error in creating db connection.');
        });
    };
    DataBaseService.prototype.checkIfTableExist = function (tableName) {
        var _this = this;
        // tslint:disable-next-line:max-line-length
        var distinctQuery = 'select DISTINCT tbl_name from sqlite_master where tbl_name = ?';
        (new Sqlite(index_1.Config.dbName)).then(function (db) {
            _this.database = db;
            var checkTableQuery = distinctQuery;
            _this.database.execSQL(checkTableQuery, [tableName])
                .then(function (resultset) {
                for (var row in resultset) {
                    if (resultset.hasOwnProperty('row')) {
                        return true;
                    }
                }
                return false;
            }, function (error) {
                return false;
            });
            return false;
        });
    };
    DataBaseService.prototype.insertIntoChats = function (chat) {
        var _this = this;
        var insertQuery = "\n          INSERT INTO contacts\n          ( number, name, avatar, text, type, muted,\n            lastSeen, unread, last_message_timestamp )\n          VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
        var updateQuery = "\n          UPDATE contacts\n          SET number = ?, name = ?,\n          avatar =?, text = ?, type = ?, muted = ?, lastSeen = ?, unread = ?,\n          last_message_timestamp = ?\n          WHERE number = ?\n        ";
        var insertJSON = [];
        insertJSON.push(chat.number);
        insertJSON.push(chat.contact.name);
        insertJSON.push(chat.contact.avatar);
        insertJSON.push(chat.text);
        insertJSON.push(chat.type);
        insertJSON.push(chat.muted);
        insertJSON.push(chat.when);
        insertJSON.push(chat.unread);
        insertJSON.push(chat.last_message_timestamp);
        (new Sqlite(index_1.Config.dbName)).then(function (db) {
            db.execSQL(insertQuery, insertJSON).then(function (id) {
                // tslint:disable-next-line:no-console
                console.log('INSERT RESULT', id);
            }, function (error) {
                // tslint:disable-next-line:no-console
                console.log('INSERT ERROR', error);
                var updateJSON = insertJSON;
                updateJSON.push(chat.number);
                _this.database.execSQL(updateQuery, updateJSON).then(function (id) {
                    // tslint:disable-next-line:no-console
                    console.log('UPDATE RESULT Chats', id);
                }, function (err) {
                    // tslint:disable-next-line:no-console
                    console.log('UPDATE ERROR', err);
                });
            });
            db.close();
        });
    };
    DataBaseService.prototype.insertIntoMessages = function (message) {
        var insertQuery = "\n            INSERT INTO messages\n            ( messageText, sender, createdTime, sent, contact)\n            VALUES (?, ?, ?, ?, ?)";
        // tslint:disable-next-line:max-line-length
        var insertJSON = [];
        insertJSON.push(message.text);
        insertJSON.push(parseInt(message.sender, 10));
        insertJSON.push(parseFloat(message.created));
        insertJSON.push(parseInt(message.sent, 10));
        insertJSON.push(message.contact);
        (new Sqlite(index_1.Config.dbName)).then(function (db) {
            db.execSQL(insertQuery, insertJSON).then(function (id) {
                // tslint:disable-next-line:no-console
                console.log('INSERT MEssage RESULT', id);
            }, function (error) {
                // tslint:disable-next-line:no-console
                console.log('INSERT ERROR', error);
            });
            db.close();
        });
    };
    DataBaseService.prototype.insertReceivedMessages = function (message) {
        var insertQuery = "\n            INSERT INTO messages\n            ( messageText, sender, createdTime, sent, contact, messageId)\n            VALUES (?, ?, ?, ?, ?, ?)";
        var insertJSON = [];
        insertJSON.push(message.text);
        insertJSON.push(parseInt(message.sender, 10));
        insertJSON.push(parseFloat(message.created));
        insertJSON.push(parseInt(message.sent, 10));
        insertJSON.push(message.contact);
        insertJSON.push(message.message_id);
        (new Sqlite(index_1.Config.dbName)).then(function (db) {
            db.execSQL(insertQuery, insertJSON).then(function (id) {
                // tslint:disable-next-line:no-console
                console.log('INSERT MEssage RESULT', id);
            }, function (error) {
                // tslint:disable-next-line:no-console
                console.log('INSERT ERROR', error);
            });
            db.close();
        });
    };
    DataBaseService.prototype.checkIfMessageExists = function (messageId) {
        var insertQuery = "\n            SELECT * FROM messages\n            WHERE messageId = ?";
        (new Sqlite(index_1.Config.dbName)).then(function (db) {
            db.all(insertQuery, [messageId]).then(function (rows) {
                if (rows.length > 0) {
                    return true;
                }
                else {
                    return false;
                }
            }, function (error) {
                // tslint:disable-next-line:no-console
                console.log('INSERT ERROR', error);
            });
            db.close();
        });
    };
    DataBaseService.prototype.insertIntoMessagesWithMessageId = function (message) {
        var insertQuery = "\n            INSERT INTO messages\n            ( messageText, sender, createdTime, sent, contact, messageId)\n            VALUES (?, ?, ?, ?, ?, ?)";
        // tslint:disable-next-line:max-line-length
        var insertJSON = [];
        insertJSON.push(message.text);
        insertJSON.push(parseInt(message.sender, 10));
        insertJSON.push(parseFloat(message.created));
        insertJSON.push(parseInt(message.sent, 10));
        insertJSON.push(message.contact);
        insertJSON.push(message.message_id);
        (new Sqlite(index_1.Config.dbName)).then(function (db) {
            db.execSQL(insertQuery, insertJSON).then(function (id) {
                // tslint:disable-next-line:no-console
                console.log('INSERT MEssage RESULT', id);
            }, function (error) {
                // tslint:disable-next-line:no-console
                console.log('INSERT ERROR', error);
            });
            db.close();
        });
    };
    DataBaseService.prototype.updateStatusOfMessage = function (status, id) {
        (new Sqlite(index_1.Config.dbName)).then(function (db) {
            var updateQuery = "\n                UPDATE messages\n                SET sent = ?\n                WHERE id = ?";
            var updateJSON = [];
            updateJSON.push(status);
            updateJSON.push(id);
            db.execSQL(updateQuery, updateJSON).then(function (uniqid) {
                // tslint:disable-next-line:no-console
                console.log('UPDATE SENT STATUS OF MESSAGES', uniqid);
            }, function (err) {
                // tslint:disable-next-line:no-console
                console.log('UPDATE ERROR', err);
            });
            db.close();
        });
    };
    DataBaseService.prototype.updateSentTimeOfMessage = function (sentTime, id) {
        (new Sqlite(index_1.Config.dbName)).then(function (db) {
            var updateQuery = "\n                UPDATE messages\n                SET sentTime = ?\n                WHERE id = ?";
            var updateJSON = [];
            updateJSON.push(sentTime);
            updateJSON.push(id);
            db.execSQL(updateQuery, updateJSON).then(function (uniqid) {
                // tslint:disable-next-line:no-console
                console.log('UPDATE SENT STATUS OF MESSAGES', uniqid);
            }, function (err) {
                // tslint:disable-next-line:no-console
                console.log('UPDATE ERROR', err);
            });
            db.close();
        });
    };
    DataBaseService.prototype.updateDeliveryTimeOfMessage = function (deliveryTime, id) {
        (new Sqlite(index_1.Config.dbName)).then(function (db) {
            var updateQuery = "\n                UPDATE messages\n                SET deliveredTime = ?\n                WHERE id = ?";
            var updateJSON = [];
            updateJSON.push(deliveryTime);
            updateJSON.push(id);
            db.execSQL(updateQuery, updateJSON).then(function (uniqid) {
                // tslint:disable-next-line:no-console
                console.log('UPDATE SENT STATUS OF MESSAGES', uniqid);
            }, function (err) {
                // tslint:disable-next-line:no-console
                console.log('UPDATE ERROR', err);
            });
            db.close();
        });
    };
    DataBaseService.prototype.updateMessaeIdOfMessage = function (messageId, id) {
        (new Sqlite(index_1.Config.dbName)).then(function (db) {
            var updateQuery = "\n                UPDATE messages\n                SET messageId = ?\n                WHERE id = ?";
            var updateJSON = [];
            updateJSON.push(messageId);
            updateJSON.push(id);
            db.execSQL(updateQuery, updateJSON).then(function (uniqid) {
                // tslint:disable-next-line:no-console
                console.log('Message Id Updated OF MESSAGE', uniqid);
            }, function (err) {
                // tslint:disable-next-line:no-console
                console.log('UPDATE ERROR', err);
            });
            db.close();
        });
    };
    DataBaseService = __decorate([
        core_1.Injectable()
    ], DataBaseService);
    return DataBaseService;
}());
exports.DataBaseService = DataBaseService;
//# sourceMappingURL=data:application/json;base64,